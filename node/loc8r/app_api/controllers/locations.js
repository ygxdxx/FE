var mongoose = require('mongoose');var Loc = mongoose.model('Location');var sendJsonResponse = function (res, status, content) {    res.status(status);    res.json(content);};//计算地理距离var theEarth = (function () {    var earthRadius = 6371;    var getDistanceFromRads = function (rads) {        return parseFloat(rads * earthRadius);    };    var getRadsFromDistance = function (distance) {        return parseFloat(distance / earthRadius);    };    return {        getDistanceFromRads: getDistanceFromRads,        getRadsFromDistance: getRadsFromDistance    }})();//获取附近所有的地点var locationsListByDistance = function (req, res) {    var lng = parseFloat(req.query.lng);    var lat = parseFloat(req.query.lat);    var point = {        type: 'Point',        coordinates: [lng, lat] //顺序不要错    };    var options = {        spherical: true,//搜索的模式        num: 10,//返回的条目数        maxDistance: theEarth.getRadsFromDistance(20)//查找的距离范围    };    //error trapping    if (!lng || !lat) {        sendJsonResponse(res, 404, {'message': 'lng and lat query parameters are required'});        return;    }    Loc.geoNear(point, options, function (err, results, status) {        var locations = [];        if (err) {            sendJsonResponse(res, 404, err);        } else {            results.forEach(function (doc) {                locations.push({                    distance: theEarth.getDistanceFromRads(doc.dis),                    name: doc.obj.address,                    rating: doc.obj.rating,                    facilities: doc.obj.facilities,                    _id: doc.obj_id                });            });            sendJsonResponse(res, 200, locations);        }    });};//创建新的地点var locationsCreate = function (req, res) {};//根据id读取某一个地点信息var locationsReadOne = function (req, res) {    if (req.params && req.params.locationid) {        Loc.findById(req.params.locationid)            .select('name reviews')            .exec(function (err, locationObj) {                if (!locationObj) {                    sendJsonResponse(res, 404, {'message': 'location not found'});                    return;                } else if (err) {                    sendJsonResponse(res, 404, err);                    return;                }                var review = locationObj.reviews[1];                sendJsonResponse(res, 200, review);            });    } else {        sendJsonResponse(res, 404, {'message': 'not locationid in request'});    }};//根据id修改某个地点var locationsUpdateOne = function (req, res) {};//根据id删除某个地点信息var locationsDeleteOne = function (req, res) {};module.exports.locationsListByDistance = locationsListByDistance;module.exports.locationsCreate = locationsCreate;module.exports.locationsReadOne = locationsReadOne;module.exports.locationsUpdateOne = locationsUpdateOne;module.exports.locationsDeleteOne = locationsDeleteOne;