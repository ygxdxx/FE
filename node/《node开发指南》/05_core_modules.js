//核心模块是node.js的核心//1. 全局对象//2. 常用工具//3. 事件机制//4. 文件系统访问//5. HTTP服务器和客户端//global 最根本的作用是作为全局变量的宿主//1. process 是一个全局变量，即 global 对象的属性。它用于描述当前 Node.js 进程状态 的对象，提供了一个与操作系统的简单接口//2. console 用于提供控制台标准输出//3. util 提供常用函数的集合，用于弥补核心 JavaScript的功能过于精简的不足{    //3.1 util.inherits    let util = require('util');    function Base() {        this.name = 'base';        this.base = 1991;        this.sayHello = function () {            console.log('Hello ' + this.name);        };    }    Base.prototype.showName = function () {        console.log(this.name);    };    function Sub() {        this.name = 'sub';    }    util.inherits(Sub, Base);    let objBase = new Base();    objBase.sayHello();    objBase.showName();    console.log(objBase.name);    let objSub = new Sub();    // objSub.sayHello();    objSub.showName();    console.log(objSub.name);}{    //3.2 util.inspect 将任意对象转换 为字符串的方法，通常用于调试和错误输出}{    //3.3 events 是 Node.js 最重要的模块，没有“之一”    //API:    //  1.EventEmitter.on(event, listener) 为指定事件注册一个监听器，接受一个字 符串 event 和一个回调函数 listener。    //  2.EventEmitter.emit(event, [arg1], [arg2], [...]) 发射 event 事件，传 递若干可选参数到事件监听器的参数表。    //  3.EventEmitter.once(event, listener) 为指定事件注册一个单次监听器， 即 监听器最多只会触发一次，触发后立刻解除该监听器。    //  4.EventEmitter.removeListener(event, listener) 移除指定事件的某个监听 器，listener 必须是该事件已经注册过的监听器。    //  5.EventEmitter.removeAllListeners([event]) 移除所有事件的所有监听器，    let events = require('events');    //events中只有EventEmitter对象    let emitter = new events.EventEmitter();    //监听事件    //同一个事件可以注册多个事件处理    emitter.on('someEvent', function (arg1, arg2) {        console.log('listener1', arg1, arg2);    });    emitter.on('someEvent', function (arg1, arg2) {        console.log('listener2', arg1, arg2);    });    //事件发射    emitter.emit('someEvent', 'hello', 'world');}{    //4. 文件系统fs    //API:    //  1.fs.readFile(filename,[encoding],[callback(err,data)]) 是最简单的读取文件的函数    //  2.fs.readFileSync(filename, [encoding])是fs.readFile同步的版本    let fs = require('fs');    fs.readFile('demo.txt', 'utf-8', function (err, data) {        if (err) {            console.error('error!');        } else {            console.log(data);        }    });}// {//     //5. HTTP服务器与客户端//     let http = require('http');//     let server = new http.Server();//     //req即request，是HTTP请求的信息，其中包含一些重要舒心//     server.on('request', function (req, res) {//         res.writeHead(200, {'Content-Type': 'text/html'});//         res.write('<h1>Node.js</h1>');//         res.end('<p>Hello World</p>');//     });//     server.listen(3000);//     console.log('server is running...');// }// {//     //获取GET请求内容//     //GET方式发送的内容都在路径中，可以手动进行解析//     let http = require('http');//     let url = require('url');//     let util = require('util');////     let server = new http.Server();//     server.on('request', function (req, res) {//         res.writeHead(200, {'Content-Type': 'text/html'});//         res.end(util.inspect(url.parse(req.url, true)));//     });//     server.listen(3000);// }{    //获取GET的请求体    let http = require('http');    let url = require('url');    let qs = require('querystring');    let util = require('util');    let server = new http.Server();    server.on('request', function (req, res) {        let post = '';        req.on('data', function (chunk) {            post += chunk;        }        req.on('end', function () {            //将解析的请求体转换为post请求格式            post = qs.parse(post);            //转换为对象            res.end(util.inspect(post));        });    });    server.listen(3000);}